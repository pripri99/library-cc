version: "3.4"

volumes:
  postgres_data:
    driver: local
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
  minio_storage: {}

services:
  app:
    build: .
    depends_on:
      - redisserv
      - kafka
    networks:
      - backend

  addBookService:
    build: ./microservices/addBookService
    depends_on:
      - kafka
    networks:
      - backend

  deleteBookService:
    build: ./microservices/deleteBookService
    depends_on:
      - kafka
    networks:
      - backend

  kafka-logs-display:
    build: ./kafka-logs-display
    image: kafka-logs-display:latest

  redisserv:
    image: redis
    networks:
      - backend

  zookeeper:
    image: "bitnami/zookeeper:latest"
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - backend

  kafka:
    image: "bitnami/kafka:latest"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
    networks:
      - backend

  minio:
    image: minio/minio
    volumes:
      - minio_storage:/data
    environment:
      MINIO_ROOT_USER: CC_user
      MINIO_ROOT_PASSWORD: CC_password
    command: server --console-address ":9001" /data
    networks:
      - backend

  postgres:
    image: postgres:13.2
    container_name: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak
    networks:
      - backend

  nginx:
    image: nginx:stable-alpine
    ports:
      - "80:80"
    volumes:
      - "./nginx/nginx.conf:/etc/nginx/nginx.conf:ro"
    depends_on:
      - kafka
    networks:
      - backend

  adminer:
    image: adminer
    restart: always
    ports:
      - "8080:8080"
    networks:
      - backend

networks:
  backend:
    driver: bridge
